{
  "version": 3,
  "sources": ["../src/language-turtle/client.ts"],
  "sourcesContent": ["/* --------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n * ------------------------------------------------------------------------------------------ */\r\nimport * as path from 'path';\r\nimport * as vscode from 'vscode';\r\nimport { getOuterMostWorkspaceFolder } from '../utilities';\r\nimport { LanguageClientBase } from '../language-client';\r\n\r\nconst clients: Map<string, LanguageClientBase> = new Map();\r\n\r\nclass TurtleLanguageClient extends LanguageClientBase {\r\n\tget serverPath(): string {\r\n\t\treturn path.join('out', 'turtle-server.js');\r\n\t}\r\n\r\n\tget languageName(): string {\r\n\t\treturn 'Turtle';\r\n\t}\r\n\r\n\tget languageId(): string {\r\n\t\treturn 'turtle';\r\n\t}\r\n}\r\n\r\nexport function activate(context: vscode.ExtensionContext) {\r\n\tfunction didOpenTextDocument(document: vscode.TextDocument): void {\r\n\t\t// We are only interested in language mode text\r\n\t\tif (document.languageId !== 'turtle') {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet folder = vscode.workspace.getWorkspaceFolder(document.uri);\r\n\r\n\t\t// Files outside a folder can't be handled. This might depend on the language.\r\n\t\t// Single file languages like JSON might handle files outside the workspace folders.\r\n\t\tif (!folder) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tfolder = getOuterMostWorkspaceFolder(folder);\r\n\r\n\t\tif (clients.has(folder.uri.toString())) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet client = new TurtleLanguageClient(folder);\r\n\t\tclient.activate(context);\r\n\r\n\t\tclients.set(folder.uri.toString(), client);\r\n\t}\r\n\r\n\tvscode.workspace.onDidOpenTextDocument(didOpenTextDocument);\r\n\tvscode.workspace.textDocuments.forEach(didOpenTextDocument);\r\n\tvscode.workspace.onDidChangeWorkspaceFolders((event) => {\r\n\t\tfor (const folder of event.removed.map(f => f.uri.toString())) {\r\n\t\t\tconst client = clients.get(folder);\r\n\r\n\t\t\tif (client) {\r\n\t\t\t\tclients.delete(folder);\r\n\t\t\t\tclient.deactivate();\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n}\r\n\r\nexport function deactivate(): Thenable<void> {\r\n\tconst promises: Thenable<void>[] = [];\r\n\r\n\tfor (const client of clients.values()) {\r\n\t\tpromises.push(client.deactivate());\r\n\t}\r\n\r\n\treturn Promise.all(promises).then(() => undefined);\r\n}\r\n\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA,WAAsB;AACtB,aAAwB;AACxB,uBAA4C;AAC5C,6BAAmC;AAEnC,MAAM,UAA2C,oBAAI,IAAI;AAEzD,MAAM,6BAA6B,0CAAmB;AAAA,EACrD,IAAI,aAAqB;AACxB,WAAO,KAAK,KAAK,OAAO,kBAAkB;AAAA,EAC3C;AAAA,EAEA,IAAI,eAAuB;AAC1B,WAAO;AAAA,EACR;AAAA,EAEA,IAAI,aAAqB;AACxB,WAAO;AAAA,EACR;AACD;AAEO,SAAS,SAAS,SAAkC;AAC1D,WAAS,oBAAoB,UAAqC;AAEjE,QAAI,SAAS,eAAe,UAAU;AACrC;AAAA,IACD;AAEA,QAAI,SAAS,OAAO,UAAU,mBAAmB,SAAS,GAAG;AAI7D,QAAI,CAAC,QAAQ;AACZ;AAAA,IACD;AAEA,iBAAS,8CAA4B,MAAM;AAE3C,QAAI,QAAQ,IAAI,OAAO,IAAI,SAAS,CAAC,GAAG;AACvC;AAAA,IACD;AAEA,QAAI,SAAS,IAAI,qBAAqB,MAAM;AAC5C,WAAO,SAAS,OAAO;AAEvB,YAAQ,IAAI,OAAO,IAAI,SAAS,GAAG,MAAM;AAAA,EAC1C;AAEA,SAAO,UAAU,sBAAsB,mBAAmB;AAC1D,SAAO,UAAU,cAAc,QAAQ,mBAAmB;AAC1D,SAAO,UAAU,4BAA4B,CAAC,UAAU;AACvD,eAAW,UAAU,MAAM,QAAQ,IAAI,OAAK,EAAE,IAAI,SAAS,CAAC,GAAG;AAC9D,YAAM,SAAS,QAAQ,IAAI,MAAM;AAEjC,UAAI,QAAQ;AACX,gBAAQ,OAAO,MAAM;AACrB,eAAO,WAAW;AAAA,MACnB;AAAA,IACD;AAAA,EACD,CAAC;AACF;AAEO,SAAS,aAA6B;AAC5C,QAAM,WAA6B,CAAC;AAEpC,aAAW,UAAU,QAAQ,OAAO,GAAG;AACtC,aAAS,KAAK,OAAO,WAAW,CAAC;AAAA,EAClC;AAEA,SAAO,QAAQ,IAAI,QAAQ,EAAE,KAAK,MAAM,MAAS;AAClD;",
  "names": []
}
